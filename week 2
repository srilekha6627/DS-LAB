#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *head = NULL,*cur,*temp,*temp1;
//creating node
struct node *create()
{
    int n;
    printf("enter no of nodes");
    scanf("%d",&n);
    while(n--)
    {
        cur = (struct node *)malloc(sizeof(struct node));
        scanf("%d",&(cur->data));
        cur->link = NULL;
    
    if(head == NULL){
        head = cur;
    }
    else{
        temp = head;
        while(temp->link != NULL)
            temp = temp->link;
        temp->link = cur;
        
    }
    }
    return head;
} 
//insert at begin
struct node *insert_begin(int ele)
{
    cur = (struct node *)malloc(sizeof(struct node));
    cur->data= ele;
    cur->link=head;
    head=cur;
    return head;
}
//insert at end 
struct node *insert_end(int ele)
{
    cur=(struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    cur->link = NULL;
    temp=head;
    while(temp->link != NULL)
          temp= temp->link;
    temp->link = cur;
    return head;
}
//inser at position
struct node *insert_pos(int ele,int pos)
{
    int c=1;
    cur=(struct node *)malloc(sizeof(struct node));
    cur->data=ele;
    temp=head;
    while(c<pos-1)
    {
        temp=temp->link;
        c++;
    }
    cur->link = temp->link;
    temp->link= cur;
    return head;
}
//delete at begin
struct node *delete_begin(struct node *head){
    temp = head;
    head = temp->link;
    printf("deleted data %d",temp->data);
    free(temp);
    return head;
}
//delete at end
struct node *delete_end(struct node*head){
    temp = head;
    while(temp->link != NULL)
    {
    temp1=temp;
    temp=temp->link;
    }
    temp->link = NULL;
    printf("deleted data %d",temp->data);
    free(temp);
    return head;
}
//delete at position
struct node *delete_pos(struct node *head,int pos)
{
    temp=head;
    int c= 1;
    while(c<pos){
        temp1 = temp;
        temp= temp->link;
        c++;
    }
    temp1->link = temp->link;
    printf("deleted element %d",temp->data);
    free(temp);
    return head;
};
//display
void display(struct node *head){
    temp=head;
    while(temp!=NULL)
    {
        printf("%d -> ",temp->data);    
        temp= temp->link;
        //printf("%d -> ",temp->data);    
    }
}
//reverse display
void reverse_display(struct node *head)
{
    if(head != NULL)
    {
        reverse_display(head->link);
        printf("%d->",head->data);
    }
}
int main(){
    struct node *head;
    int ch,ele,pos;
    while(1)
    {
        printf("1-create\n 2-insert_begin\n 3-insert_end\n 4-insert_pos\n 5-delete_begin\n 6-delete_end\n 7-delete_pos\n 8-display\n 9-reverse_display\n");
        printf("enter your choice");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: head=create();
                   break;
            case 2: scanf("%d",&ele);
                   head= insert_begin(ele);
                   break;
            case 3: scanf("%d",&ele);
                   head=insert_end(ele);
                   break;
 #include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *head = NULL,*cur,*temp,*temp1;
//creating node
struct node *create()
{
    int n;
    printf("enter no of nodes");
    scanf("%d",&n);
    while(n--)
    {
        cur = (struct node *)malloc(sizeof(struct node));
        scanf("%d",&(cur->data));
        cur->link = NULL;
    
    if(head == NULL){
        head = cur;
    }
    else{
        temp = head;
        while(temp->link != NULL)
            temp = temp->link;
        temp->link = cur;
        
    }
    }
    return head;
} 
//insert at begin
struct node *insert_begin(int ele)
{
    cur = (struct node *)malloc(sizeof(struct node));
    cur->data= ele;
    cur->link=head;
    head=cur;
    return head;
}
//insert at end 
struct node *insert_end(int ele)
{
    cur=(struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    cur->link = NULL;
    temp=head;
    while(temp->link != NULL)
          temp= temp->link;
    temp->link = cur;
    return head;
}
//inser at position
struct node *insert_pos(int ele,int pos)
{
    int c=1;
    cur=(struct node *)malloc(sizeof(struct node));
    cur->data=ele;
    temp=head;
    while(c<pos-1)
    {
        temp=temp->link;
        c++;
    }
    cur->link = temp->link;
    temp->link= cur;
    return head;
}
//delete at begin
struct node *delete_begin(struct node *head){
    temp = head;
    head = temp->link;
    printf("deleted data %d",temp->data);
    free(temp);
    return head;
}
//delete at end
struct node *delete_end(struct node*head){
    temp = head;
    while(temp->link != NULL)
    {
    temp1=temp;
    temp=temp->link;
    }
    temp->link = NULL;
    printf("deleted data %d",temp->data);
    free(temp);
    return head;
}
//delete at position
struct node *delete_pos(struct node *head,int pos)
{
    temp=head;
    int c= 1;
    while(c<pos){
        temp1 = temp;
        temp= temp->link;
        c++;
    }
    temp1->link = temp->link;
    printf("deleted element %d",temp->data);
    free(temp);
    return head;
};
//display
void display(struct node *head){
    temp=head;
    while(temp!=NULL)
    {
        printf("%d -> ",temp->data);    
        temp= temp->link;
        //printf("%d -> ",temp->data);    
    }
}
//reverse display
void reverse_display(struct node *head)
{
    if(head != NULL)
    {
        reverse_display(head->link);
        printf("%d->",head->data);
    }
}
int main(){
    struct node *head;
    int ch,ele,pos;
    while(1)
    {
        printf("1-create\n 2-insert_begin\n 3-insert_end\n 4-insert_pos\n 5-delete_begin\n 6-delete_end\n 7-delete_pos\n 8-display\n 9-reverse_display\n");
        printf("enter your choice");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: head=create();
                   break;
            case 2: scanf("%d",&ele);
                   head= insert_begin(ele);
                   break;
            case 3: scanf("%d",&ele);
                   head=insert_end(ele);
                   break;
            case 4: scanf("%d %d",&ele,&pos);
                   head=insert_pos(pos,ele);
                   break;
            case 5: head= delete_begin(head);
                   break;
            case 6: head=delete_end(head);
                   break;
            case 7: scanf("%d",&pos);
                   head= delete_pos(head,pos);
                   break;
            case 8: display(head);
                   break;       
            case 9: reverse_display(head);
                   break;      
            case 10:exit(0);
            

        }
    }
}            








OUTPUT:
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
1
enter no of nodes3
10 20 30
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
8
10 -> 20 -> 30 -> 1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
9
30->20->10->1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
2
40
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
8
40 -> 10 -> 20 -> 30 -> 1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
3
50
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
8
40 -> 10 -> 20 -> 30 -> 50 -> 1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
4
3
60
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
8
40 -> 10 -> 60 -> 20 -> 30 -> 50 -> 1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
5
deleted data 401-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
6
deleted data 501-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
7
3
deleted element 201-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
8
10 -> 60 -> 30 -> 50 -> 1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
enter your choice
